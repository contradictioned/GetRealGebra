function BaseRelation(a) {
    this.result = new Relation(), this.name = a;
}

function ColumnRenaming(a, b) {
    this.renaming = a, this.child = b;
}

function Cross(a, b) {
    this.left = a, this.right = b;
}

function Intersection(a, b) {
    this.left = a, this.right = b;
}

function NaturalJoin(a, b) {
    this.left = a, this.right = b;
}

function Projection(a, b) {
    this.attrs = a, this.result = void 0, this.child = b, this.indecesToStay = [];
}

function RelationRenaming(a, b) {
    this.new_name = a, this.child = b;
}

function Selection(a, b) {
    this.predicate = a, this.child = b;
}

function Setminus(a, b) {
    this.left = a, this.right = b;
}

function ThetaJoin(a, b, c) {
    this.left = a, this.right = b, this.predicate = c;
}

function Union(a, b) {
    this.left = a, this.right = b;
}

function Relation() {
    this.name = void 0, this.attributes = [], this.tuples = [];
}

function Tuple(a, b) {
    this.attributes = a, this.values = b;
}

BaseRelation.prototype.exec = function() {
    var a = this.findTable(this.name);
    this.result.attributes = this.getAttrsFromTable(a), this.getTuples(a, this.result.attributes);
}, BaseRelation.prototype.getAttrsFromTable = function(a) {
    var b = a.getElementsByTagName("th");
    if (0 === b.length) throw "Table seems to have no columns.";
    for (var c = new Array(b.length), d = 0; d < b.length; d++) {
        var e = b[d].innerHTML;
        c[d] = [ this.name, e ];
    }
    return c;
}, BaseRelation.prototype.rowToArray = function(a, b) {
    for (var c = [], d = a.getElementsByTagName("td"), e = 0; e < b.length; e++) c.push(d[e].innerHTML);
    return c;
}, BaseRelation.prototype.getTuples = function(a, b) {
    for (var c = a.getElementsByTagName("tbody")[0].getElementsByTagName("tr"), d = (new Array(c.length), 
    0); d < c.length; d++) {
        var e = this.rowToArray(c[d], b);
        this.result.addTuple(e);
    }
}, BaseRelation.prototype.findTable = function(a) {
    for (var b = document.getElementsByClassName("relation"), c = 0; c < b.length; c++) {
        var d = b[c].getElementsByTagName("caption")[0];
        if (0 === d.innerText.indexOf(a)) return b[c];
    }
    throw "Tried to build table " + a + " but no such relation defined";
}, ColumnRenaming.prototype.exec = function() {
    this.child.exec(), this.result = new Relation(), this.buildAttrs();
    for (var a = this.child.result.tuples, b = 0; b < a.length; b++) this.result.addTuple(a[b].values);
}, ColumnRenaming.prototype.buildAttrs = function() {
    this.result.attributes = [];
    for (var a = this.child.result.attributes, b = 0; b < a.length; b++) {
        for (var c = !1, d = 0; d < this.renaming.length; d++) if (a[b][1] == this.renaming[d].oldname) {
            c = !0;
            var e = [ void 0, this.renaming[d].newname ];
            this.result.attributes.push(e);
        }
        c || this.result.attributes.push(a[b]);
    }
    console.log(this.result.attributes);
}, Cross.prototype.exec = function() {
    this.left.exec(), this.right.exec();
    var a = this.left.result, b = this.right.result;
    this.result = new Relation(), this.result.attributes = a.attributes.concat(b.attributes);
    for (var c = 0; c < a.tuples.length; c++) for (var d = 0; d < b.tuples.length; d++) {
        var e = a.tuples[c].values, f = b.tuples[d].values, g = e.concat(f);
        this.result.addTuple(g);
    }
}, Intersection.prototype.exec = function() {
    this.left.exec(), this.right.exec(), this.result = new Relation(), this.result.attributes = this.left.result.attributes.slice();
    for (var a = 0; a < this.left.result.tuples.length; a++) for (var b = 0; b < this.right.result.tuples.length; b++) {
        var c = this.left.result.tuples[a].values, d = this.right.result.tuples[b].values;
        console.log(c), console.log(d), console.log(c.join("|") == d.join("|")), c.join("|") == d.join("|") && this.result.addTuple(c);
    }
}, NaturalJoin.prototype.exec = function() {
    this.left.exec(), this.right.exec();
    var a = this.left.result.tuples, b = this.right.result.tuples;
    this.result = new Relation(), this.extractJoinAttrs(), this.buildNewAttrs();
    for (var c = 0; c < a.length; c++) for (var d = 0; d < b.length; d++) {
        var e = a[c], f = b[d];
        if (this.computeJoinPredicate(e, f)) {
            var g = this.builJointTuple(e, f);
            this.result.addTuple(g);
        }
    }
}, NaturalJoin.prototype.extractJoinAttrs = function() {
    this.joinAttrs = [ [], [] ];
    for (var a = this.left.result.attributes, b = this.right.result.attributes, c = 0; c < a.length; c++) for (var d = 0; d < b.length; d++) a[c][1] === b[d][1] && (this.joinAttrs[0].push(c), 
    this.joinAttrs[1].push(d));
}, NaturalJoin.prototype.buildNewAttrs = function() {
    for (var a = [], b = 0; b < this.left.result.attributes.length; b++) -1 === this.joinAttrs[0].indexOf(b) && a.push(this.left.result.attributes[b]);
    for (b = 0; b < this.joinAttrs[0].length; b++) {
        var c = [ void 0, this.left.result.attributes[this.joinAttrs[b]][1] ];
        a.push(c);
    }
    for (b = 0; b < this.right.result.attributes.length; b++) -1 === this.joinAttrs[1].indexOf(b) && a.push(this.right.result.attributes[b]);
    this.result.attributes = a;
}, NaturalJoin.prototype.computeJoinPredicate = function(a, b) {
    var c = !0;
    for (i = 0; i < this.joinAttrs[0].length; i++) l_idx = this.joinAttrs[0][i], r_idx = this.joinAttrs[1][i], 
    c = c && a.values[l_idx] == b.values[r_idx];
    return c;
}, NaturalJoin.prototype.builJointTuple = function(a, b) {
    for (var c = [], d = 0; d < a.values.length; d++) -1 === this.joinAttrs[0].indexOf(d) && c.push(a.values[d]);
    for (d = 0; d < this.joinAttrs[0].length; d++) c.push(a.values[this.joinAttrs[0][d]]);
    for (d = 0; d < b.values.length; d++) -1 === this.joinAttrs[1].indexOf(d) && c.push(b.values[d]);
    return c;
}, Projection.prototype.exec = function() {
    this.child.exec(), this.result = new Relation();
    for (var a = this.child.result.attributes, b = [], c = 0; c < a.length; c++) for (var d = a[c], e = 0; e < this.attrs.length; e++) if (-1 === this.attrs[e].indexOf(".") && this.attrs[e] === d[1] && (this.indecesToStay.push(c), 
    b.push(d)), this.attrs[e].indexOf(".") >= 0) {
        var f = this.attrs[e].split(".");
        f[0] === d[0] && f[1] === d[1] && (this.indecesToStay.push(c), b.push(d));
    }
    this.result.attributes = b;
    var g = this.child.result.tuples;
    for (c = 0; c < g.length; c++) {
        var h = this.project(g[c]);
        this.result.addTuple(h);
    }
}, Projection.prototype.project = function(a) {
    for (var b = [], c = 0; c < a.values.length; c++) -1 !== this.indecesToStay.indexOf(c) && b.push(a.values[c]);
    return b;
}, RelationRenaming.prototype.exec = function() {
    this.child.exec(), this.result = new Relation();
    for (var a = 0; a < this.child.result.attributes.length; a++) {
        var b = [ this.new_name, this.child.result.attributes[a][1] ];
        this.result.attributes.push(b);
    }
    for (a = 0; a < this.child.result.tuples.length; a++) this.result.addTuple(this.child.result.tuples[a].values);
}, Selection.prototype.exec = function() {
    this.child.exec();
    var a = this.child.result;
    this.result = new Relation(), this.result.attributes = this.child.result.attributes;
    for (var b = 0; b < a.tuples.length; b++) this.predicate(a.tuples[b]) && this.result.addTuple(a.tuples[b].values);
}, Selection.prototype.getAttr = function(a) {
    var b;
    if (-1 === a.indexOf(".")) for (var c = 0; c < this.result.attributes.length; c++) this.result.attributes[c][1] === a && (b = c); else for (var d = a.split("."), c = 0; c < this.result.attributes.length; c++) this.result.attributes[c][0] === d[0] && this.result.attributes[c][1] === d[1] && (b = c);
    return b;
}, Setminus.prototype.exec = function() {
    this.left.exec(), this.right.exec(), this.result = new Relation(), this.result.attributes = this.left.result.attributes.slice();
    for (var a = 0; a < this.left.result.tuples.length; a++) {
        for (var b = !1, c = 0; c < this.right.result.tuples.length; c++) {
            var d = this.left.result.tuples[a].values, e = this.right.result.tuples[c].values;
            b = b || d.join("|") == e.join("|");
        }
        b || this.result.addTuple(d);
    }
}, ThetaJoin.prototype.exec = function() {
    this.left.exec(), this.right.exec();
    var a = this.left.result, b = this.right.result;
    this.result = new Relation();
    var c = a.attributes.concat(b.attributes);
    this.result.attributes = c;
    for (var d = 0; d < a.tuples.length; d++) for (var e = 0; e < b.tuples.length; e++) {
        var f = a.tuples[d].values, g = b.tuples[e].values, h = f.concat(g), i = new Tuple(c, h);
        this.predicate(i) && this.result.addTuple(h);
    }
}, Union.prototype.exec = function() {
    this.left.exec(), this.right.exec(), this.result = new Relation(), this.result.attributes = this.left.result.attributes.slice();
    for (var a = 0; a < this.left.result.tuples.length; a++) this.result.addTuple(this.left.result.tuples[a].values);
    for (var a = 0; a < this.right.result.tuples.length; a++) this.result.addTuple(this.right.result.tuples[a].values);
}, Relation.prototype.addTuple = function(a) {
    for (var b = new Tuple(this.attributes, a), c = 0; c < this.tuples.length; c++) {
        var d = !0;
        for (j = 0; j < this.tuples[c].values.length; j++) d = d && this.tuples[c].values[j] === a[j];
        if (d) return this.length;
    }
    this.tuples.push(b);
}, Tuple.prototype.get = function(a) {
    return -1 === a.indexOf(".") ? this.getSimple(a) : this.getQualified(a);
}, Tuple.prototype.getSimple = function(a) {
    for (var b = 0; b < this.attributes.length; b++) if (a === this.attributes[b][1]) return this.values[b];
}, Tuple.prototype.getQualified = function(a) {
    for (var b = a.split("."), c = 0; c < this.attributes.length; c++) if (b[0] === this.attributes[c][0] && b[1] === this.attributes[c][1]) return this.values[c];
};